import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:google_fonts/google_fonts.dart';

import 'package:login/screens/login_screen.dart';
import 'package:login/screens/signup_screen.dart';
import 'package:login/screens/main_screen.dart';
import 'package:login/screens/splash_screen.dart'; // Import the dedicated splash screen file
import 'firebase_options.dart'; // Ensure you have this file generated by the FlutterFire CLI

/// The main entry point of the application.
void main() async {
  // Ensure that Flutter's widgets are initialized before running the app.
  // This is crucial for plugins like Firebase to function correctly.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase using the default options for the current platform.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize Hive, a lightweight and fast key-value database.
  await Hive.initFlutter();
  // Open a box to store theme preferences.
  // The 'theme_prefs' box will be used to persist the user's selected theme.
  await Hive.openBox('theme_prefs');

  // Run the main application widget.
  runApp(const MyApp());
}

/// The root widget of the application.
///
/// This widget handles the main application logic, including theme selection
/// based on user preferences stored in Hive and route management.
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    // Listen for changes in the Hive box to enable dynamic theme switching.
    // ValueListenableBuilder rebuilds its widget tree whenever the box's
    // contents change, ensuring the theme updates in real-time.
    return ValueListenableBuilder(
      valueListenable: Hive.box('theme_prefs').listenable(),
      builder: (context, box, child) {
        // Retrieve the theme preference from the box.
        // Defaults to true (purple/dark theme) if no value is found.
        final bool isPurpleTheme = box.get('isPurpleTheme', defaultValue: true);

        // Define the themes for the application.
        // The dark theme is based on a deep purple and dark gray color scheme.
        final ThemeData darkTheme = ThemeData.dark().copyWith(
          scaffoldBackgroundColor: const Color(0xFF1A1A1A),
          primaryColor: const Color(0xFF6A0DAD),
          colorScheme: const ColorScheme.dark(
            primary: Color(0xFF6A0DAD),
            secondary: Colors.tealAccent,
            background: Color(0xFF1A1A1A),
          ),
          // Apply the Google Fonts 'Inter' to the entire text theme.
          textTheme: GoogleFonts.interTextTheme(ThemeData.dark().textTheme),
        );

        // The light theme is based on a teal and white color scheme.
        final ThemeData lightTheme = ThemeData.light().copyWith(
          scaffoldBackgroundColor: Colors.white,
          primaryColor: Colors.teal,
          colorScheme: const ColorScheme.light(
            primary: Colors.teal,
            secondary: Colors.cyan,
            background: Colors.white,
          ),
          // Apply the Google Fonts 'Inter' to the entire text theme.
          textTheme: GoogleFonts.interTextTheme(ThemeData.light().textTheme),
        );

        return MaterialApp(
          debugShowCheckedModeBanner: false,
          title: 'Flutter Firebase Auth',
          // Conditionally apply the dark or light theme based on the Hive preference.
          theme: isPurpleTheme ? darkTheme : lightTheme,
          // Define all the named routes for the application.
          // This provides a clean way to navigate between screens.
          initialRoute: '/',
          routes: {
            // The splash screen is the first screen to be displayed.
            '/': (context) => const SplashScreen(),
            // Routes for the login, signup, and main screens.
            '/login': (context) => const LoginScreen(),
            '/signup': (context) => const SignupScreen(),
            '/main': (context) => const MainScreen(),
          },
        );
      },
    );
  }
}
